## You can check whether Git is installed and what version you are using by opening up a terminal window in Linux or Mac, or a command prompt window in Windows, and typing the following command:

$ git --version

====================================================================================================================
## Set Up and Initialization
====================================================================================================================
## Git allows you to configure a number of settings that will apply to all the repositories on your local machine. 
## For instance, configure a username that Git will use to credit you with any changes you make to a local repository:

$ git config --global user.name “firstname lastname”

## Configure an email address to be associated with each history marker:

$ git config --global user.email “valid-email” 

## Configure your preferred text editor as well:

$ git config --global core.editor “nano”
====================================================================================================================
## Check your Git version with the following command, which will also confirm that Git is installed: 
## Step 1: Create a new GitHub Repo


## Step 2: Initialize Git in the project folder
## Note: if you already have an initialized Git repository, you can skip this command

$ git init

## NB: This step creates a hidden .git directory in your project folder which the git software recognizes and uses to store all the metadata and version history for the project.
## Add the files to Git index

$ git add -A

## NB: The git add command is used to tell git which files to include in a commit, and the -A argument means “include all”.

## Commit Added Files

$ git commit -m 'Added my project'

## The git commit command creates a new commit with all files that have been “added”. the -m 'Added my project' is the message that will be included alongside the commit, used for future reference to understand the commit.

## Add new remote origin (in this case, GitHub)

$ git remote add origin git@github.com:sammy/my-new-project.git
$ git remote add origin https://github.com/career-karma-tutorials/ck-git

## Note: Don’t forget to replace the highlighted bits above with your username and repo name.

## In git, a “remote” refers to a remote version of the same repository, which is typically on a server somewhere (in this case GitHub.) 
## “origin” is the default name git gives to a remote server (you can have multiple remotes) so 'git remote add origin' is instructing git to add the URL of the default remote server for this repo.

## Push to GitHub

$ git push -u -f origin master

## With this, there are a few things to note. The -f flag stands for force. This will automatically overwrite everything in the remote directory. We’re only using it here to overwrite the README that GitHub automatically initialized. 
If you skipped that, the -f flag isn’t really necessary. The -u flag sets the remote origin as the default. This lets you later easily just do git push and git pull without having to specifying an origin since we always want 
GitHub in this case.

====================================================================================================================
## All together
====================================================================================================================
$ git init
$ git add -A
$ git commit -m 'Added my project'
$ git remote add origin git@github.com:sammy/my-new-project.git
$ git push -u -f origin master
====================================================================================================================
Staging
====================================================================================================================

## When you’ve modified a file and have marked it to go in your next commit, it is considered to be a staged file.
## Check the status of your Git repository, including files added that are not staged, and files that are staged:

$ git status

## To stage modified files, use the add command, which you can run multiple times before a commit. 
## If you make subsequent changes that you want to include in the next commit, you must run add again.

## You can specify the specific file with add:

$ git add my_script.py

## With . you can add all files in the current directory, including files that begin with a .:

$ git add .

## If you would like to add all files in a current directory as well as files in subdirectories, you can use the -all or -A flag:

$ git add -A

## You can remove a file from staging while retaining changes within your working directory with reset:

$ git reset my_script.py
====================================================================================================================
Committing
====================================================================================================================

## Once you have staged your updates, you are ready to commit them, which will record changes you have made to the repository.

## To commit staged files, you’ll run the commit command with your meaningful commit message so that you can track commits:

$ git commit -m "Commit message"

## You can condense staging all tracked files by committing them in one step:

$ git commit -am "Commit message"

## If you need to modify your commit message, you can do so with the --amend flag:

$ git commit --amend -m "New commit message"

====================================================================================================================
## Conclusion
====================================================================================================================

## Now you are all set to track your code changes remotely in GitHub! As a next step here’s a complete guide to how to use git

https://www.digitalocean.com/community/cheatsheets/how-to-use-git-a-reference-guide

## Once you start collaborating with others on the project, you’ll want to know how to create a pull request.

https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github
====================================================================================================================